import CytoscapeComponent from "react-cytoscapejs";
import cytoscape from "cytoscape";
import React, { useState } from "react";
import dagre from "cytoscape-dagre";
//import { Chart } from "react-google-charts";
import ApexChart from "apexcharts";
import Chart from "react-apexcharts";
import example_tree from "./../files/exampleTree.json";


export default function CloneTree({ nodes, edges }) {
  // todo tooltip when hover on node
  // todo for combined nodes, include buttons corresponding to displaying graph for each node component
  cytoscape.use(dagre);

  const elements = [];
  for (let i = 0; i < nodes.length; i++) {
    elements.push({ data: { id: nodes[i].id, label: nodes[i].label } });
  }
  for (let i = 0; i < edges.length; i++) {
    elements.push({
      data: { source: edges[i].from, target: edges[i].to, label: String(i) },
    });
  }

  let myCyRef;

  const myLabels = []
  for (let i=0; i<1000; i++){
    myLabels.push(i.toString())
  }

  const apexOptions = {
    chart: {
      height: "100px",
      width: "500px",
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false
    },
    colors: ['#32a852', '#E91E63', '#32a852', "#000000"],
    labels: myLabels,
    markers: {
      size: 10,
    },
    yaxis: 
      {
        title: {
          text: 'Number of Copies',
        },
      },
    opposite: true,
  };
  const apexSeries = [{
    name: '# Paternal Copies',
    type: 'line',
    data: [2, 2]
  }, {
    name: '# Maternal Copies',
    type: 'line',
    data: [1.9, 1.9]
  }, 
  {
    name: '# Maternal Copies',
    type: 'line',
    data: [null, 3, 3]
  },/*
  {
    name: 'ScatterTest',
    type: 'scatter',
    data: [8,7]
  }*/]

  const [data, set_data] = useState([
    ["Segment ID", "# Maternal Copies", "# Paternal Copies"],
    [0, 0, 0],
  ]);
  const options = {
    title: "Information of Selected Node",
    hAxis: { title: "Genomic Position" },
    vAxis: { title: "Number of Copies" },
    explorer: {
      maxZoomOut: 2,
      keepInBounds: true,
    },
  };

  const layout = {
    name: "dagre",
    directed: true,
    animate: true,
    avoidOverlap: true,
  };

  let styleSheet = [
    {
      selector: "node",
      style: {
        backgroundColor: "white",
        width: 75,
        height: 30,
        label: "data(label)",
        color: "black",
        fontSize: 15,
        shape: "round-rectangle",
        borderWidth: 2,
        borderStyle: "solid",
        borderColor: "#4a56a6",
        "text-valign" : "center",
        "text-halign" : "center"
      }
    },
    {
      selector: "node:selected",
      style: {
        "border-width": "6px",
        "border-color": "#AAD8FF",
        "border-opacity": "0.5",
        "background-color": "#77828C",
        color: "white",
        width: 75,
        height: 30,

      }
    },
    {
      selector: "edge",
      style: {
        width: 3,
        "line-color": "#AAD8FF",
        "target-arrow-color": "#AAD8FF",
        "target-arrow-shape": "triangle",
        "curve-style": "bezier"
      }
    }
  ];

  return (
    <>
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          width: "auto",
          height: "90vh",
          overflow: "scroll",
        }}
      >
        <div
          style={{
            height: "80vh",
            width: "auto",
            border: "2px solid darkblue",
            borderRadius: "0.65rem",
            overflow: "scroll",
          }}
        >
          <CytoscapeComponent
            elements={elements}
            style={{ width: "30vw", height: "60vh" }}
            autounselectify={false}
            layout={layout}
            boxSelectionEnabled={true}
            stylesheet={styleSheet}
            cy={(cy) => {
              myCyRef = cy;
              cy.on("tap", "node", (evt) => {
                var node = evt.target;
                console.log("EVT", evt);
                console.log("TARGET", node.data());
                console.log("TARGET TYPE", typeof node[0]);

                // change data and options
                let node_idx = node.data().id;
                const tmp_data = [
                  ["Segment ID", "# Maternal Copies", "# Paternal Copies"],
                ];
                let segments =
                  example_tree["tree"]["nodes"][node_idx]["segments"];
                for (let i = 0; i < segments.length; i++) {
                  let x = segments[i]["x"];
                  let y = segments[i]["y"];
                  tmp_data.push([i, x, y]);
                }
                set_data(tmp_data);
              });
              var layout = cy.makeLayout({ name: "dagre" });
              layout.run();
            }}
          />
        </div>
        <div
          style={{
            height: "50vh",
            width: "auto",
            border: "2px solid darkblue",
            borderRadius: "0.65rem",
            overflow: "scroll",
            marginTop: "1rem",
            paddingTop: "1.5rem",
          }}
        >
          {/*<Chart
            chartType="AreaChart"
            width="auto"
            height="auto"
            data={data}
            options={options}
          />*/}
          <Chart options={apexOptions} series={apexSeries} type="line" />;
        </div>
      </div>
    </>
  );
}
